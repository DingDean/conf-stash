"引入Vundle插件管理器配置
set nocompatible              " be iMproved, required

" 自动安装 vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MY_CONF_DIR/vim/vimrc.nvim
endif

call plug#begin('~/.vim/plugged')

"引入功能性插件
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-dispatch'
Plug 'christoomey/vim-tmux-navigator'
Plug 'majutsushi/tagbar'
Plug 'arcticicestudio/nord-vim'
Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'folke/tokyonight.nvim', { 'branch': 'main' }
Plug 'andymass/vim-matchup'
Plug 'rhysd/git-messenger.vim' " commit msg under cursor
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'itchyny/lightline.vim'
Plug 'w0rp/ale'
Plug 'vimwiki/vimwiki'
Plug 'scrooloose/nerdcommenter'
Plug 'editorconfig/editorconfig-vim'
Plug 'jiangmiao/auto-pairs'
Plug 'Yggdroot/indentLine'
Plug 'wincent/ferret'

" "语言相关插件 ->
Plug 'othree/html5.vim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
" Typescript
Plug 'leafgarland/typescript-vim'
" Rust
Plug 'rust-lang/rust.vim'
Plug 'NoahTheDuke/vim-just' " Just command runner 
" Lua
Plug 'nvim-lua/plenary.nvim'
Plug 'norcalli/nvim-colorizer.lua'
Plug 'lewis6991/gitsigns.nvim'
" Toml
Plug 'cespare/vim-toml'
" CPP
Plug 'octol/vim-cpp-enhanced-highlight'
" Sniprun
" Plug 'michaelb/sniprun', {'do': 'bash install.sh'}
Plug 'simrat39/symbols-outline.nvim'
Plug 'ryanoasis/vim-devicons'
Plug 'DingDean/wgsl.vim'
" Golang
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
" 中文排版
Plug 'hotoo/pangu.vim'
" 数据记录
Plug 'wakatime/vim-wakatime'
Plug 'nvim-lua/plenary.nvim'

call plug#end()
filetype plugin indent on

if &shell =~# 'fish'
  set shell=/bin/zsh
  let $SHELL = "/bin/zsh"
endif

if (has("termguicolors"))
  set termguicolors
endif

syntax on
set hidden
set t_Co=256
" colorscheme onehalflight
colorscheme onehalfdark
let g:onedark_terminal_italics=1
" colorscheme nord

set relativenumber
set number
set showmode
set smartcase

set expandtab
set smarttab
set softtabstop=0
set tabstop=2
set shiftwidth=2
set autoindent
set smartindent

set hls

set nobackup
set nowritebackup
set history=50
set ruler
set showcmd
set incsearch

set lazyredraw
set showmatch
set signcolumn=yes

inoremap jk <esc>

nnoremap <leader>ev :vsplit $MY_CONF_DIR/vim/vimrc.nvim<cr>
nnoremap <leader>sv :source $MY_CONF_DIR/vim/vimrc.nvim<cr>
nnoremap <leader>ea :vsplit $MY_CONF_DIR/vim/abbrev.vim<cr>
nnoremap <leader>ep :vsplit $MY_CONF_DIR/vim/plugins.vim<cr>
nnoremap <leader>pl :CocList post<cr>
nnoremap <leader>pa :CocCommand post.new<cr>
nnoremap <leader>pd :CocCommand post.do<cr>
nnoremap <leader>to :TagbarOpen<cr>
nnoremap <leader>tc :TagbarClose<cr>
nnoremap <leader>tg :Twiggy<cr>
nnoremap <leader>go :Goyo<cr>
nnoremap <leader>nf :NERDTreeFind<cr>
nnoremap <leader>hl :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

nnoremap <c-n> :NERDTreeToggle<cr>
nnoremap ; :

let g:loaded_python_provider = 0
let g:ruby_host_prog = "rbenv exec neovim-ruby-host"

" Bold, Strikethrough, Underline and Italic
" if &term =~ 'xterm\|kitty\|alacritty\|tmux'
"     let &t_Ts = "\e[9m"   " Strikethrough
"     let &t_Te = "\e[29m"
"     let &t_Cs = "\e[4:3m" " Undercurl
"     let &t_Ce = "\e[4:0m"
" endif
" autocmd BufWritePre *.ts :Prettier

" 自动纠错
source $MY_CONF_DIR/vim/abbrev.vim
source $MY_CONF_DIR/vim/plugins.vim
source $MY_CONF_DIR/vim/plugin.vimwiki.vim
